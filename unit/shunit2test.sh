#!/bin/bash


BOLD='\033[1m'
BRIGHT_WHITE='\033[1;37m'
RED='\033[0;31m'
GREEN='\033[0;32m'
RESET='\033[0m'

local test_name="$1"
local expected="$2"
local output="$3"

debug_assert_equals() {
  if [ "$output" != "$expected" ]; then
    echo "${RED}TEST $test FAILED: $test_name${RESET}"
    echo "DEBUG: Expected:"
    echo "$expected"
    echo "DEBUG: Got:"
    echo "$output"
    assertEquals "Test '$test_name' failed." "$expected" "$output"
  else
    echo "${GREEN}TEST $test PASSED: $test_name${RESET}"
    echo "DEBUG: Expected:"
    echo "$expected"
    echo "DEBUG: Got:"
    echo "$output"
    assertEquals "Test '$test_name' passed." "$expected" "$output"
  fi
}


test_print1 () {
  test="test_print1"
  output=$(bin/universe  -s -r '60-62')
  expected=" <   =   >   "
  debug_assert_equals "test_print1" "$expected" "$output"
}

test_print002 () {
  test="test_print2"
  output=$(bin/universe -s -n -r "60-62")
  expected=" <  
 =  
 >  "
  debug_assert_equals "test_print002" "$expected" "$output"
}

test_print003 () {
  test="test_print003"
  output=$(bin/universe -s -x -d -n -r "60-62")
  expected=" 60 0x3c <  
 61 0x3d =  
 62 0x3e >  "
  debug_assert_equals "test_print003" "$expected" "$output"
}

test_print004 () {
  test="test_print004"
  output=$(bin/universe -s -x -d -n -r "0x202e,0x202d,0x22,0x41-0x42")
  expected=" 8238 0xe2/0x80/0xae ‮  
 8237 0xe2/0x80/0xad ‭  
 34 0x22 \"  
 65 0x41 A  
 66 0x42 B  "
  debug_assert_equals "test_print004" "$expected" "$output"
}

test_print005 () {
  test="test_print005"
  output=$(bin/universe -s -n --main_delimiter_none -r "49,51,51,55")
  expected=" 1 
 3 
 3 
 7 "
  debug_assert_equals "test_print005" "$expected" "$output"

}

test_print006 () {
  test="test_print006"
  output=$(bin/universe -s -n --main_delimiter_comma --block_delimiter_semicolon -ia tux)
  expected=";t,;
;u,;
;x,;"
  debug_assert_equals "test_print006" "$expected" "$output"
}

test_print007 () {
  test="test_print007"
  output=$(bin/universe  -s -x -d   --main_delimiter_comma --block_delimiter_semicolon -ia "tux A bin A")
  expected=";116,0x74,t,;;117,0x75,u,;;120,0x78,x,;;32,0x20, ,;;65,0x41,A,;;32,0x20, ,;;98,0x62,b,;;105,0x69,i,;;110,0x6e,n,;;32,0x20, ,;;65,0x41,A,; "
  debug_assert_equals "test_print007" "$expected" "$output"
}

test_print008 () {
  test="test_print008"
  output=$(bin/universe  -s   --main_delimiter_none --block_delimiter_semicolon -ia "Hello Binary")
  expected=";H;;e;;l;;l;;o;; ;;B;;i;;n;;a;;r;;y; "
  debug_assert_equals "test_print008" "$expected" "$output"
}


test_print009 () {
  test="test_print009"
  output=$(bin/universe  -s   --main_delimiter_space --block_delimiter_space -ia "cat /dev/null | grep dev")
  expected=" c   a   t       /   d   e   v   /   n   u   l   l       |       g   r   e   p       d   e   v   "
  debug_assert_equals "test_print009" "$expected" "$output"
}

test_print010 () {
  test="test_print010"
  output=$(bin/universe  -d   --main_delimiter_comma --block_delimiter_space -ia "♫   ")
  expected=" 9835,  32,  32,  32,  "
  debug_assert_equals "test_print010" "$expected" "$output"
}

test_print011 () {
  test="test_print011"
  output=$(bin/universe  -d   --main_delimiter_space --block_delimiter_space -ia "\"")
  expected=" 34   "
  debug_assert_equals "test_print011" "$expected" "$output"
}

test_print012 () {
  test="test_print012"
  output=$(bin/universe -s --main_delimiter_none --block_delimiter_none -r "0x222A,0xFF2E,0x0399,0x0421,0x039F,0xFF24,0xFF25")
  expected="∪ＮΙСΟＤＥ "
  debug_assert_equals "test_print012" "$expected" "$output"
}

test_print013 () {
  test="test_print013"
  output=$(bin/universe -s -x -u -t -d -n --main_delimiter_comma --block_delimiter_semicolon -r "0x200B,0x06D4,0x0DF4,0x2024,0x00B7,0xFF0E,0x02D9,0x02D7,0x0307,0x0323,0x00A0,0x002D,0xFF0F,0x002F,0x2030-0x2060,0x202A-0x203K,0x204")
  expected=";8203,0xe2/0x80/0x8b,0x200b,0x0000200b,​,;
;1748,0xdb/0x94,0x06d4,0x000006d4,۔,;
;3572,0xe0/0xb7/0xb4,0x0df4,0x00000df4,෴,;
;8228,0xe2/0x80/0xa4,0x2024,0x00002024,․,;
;183,0xc2/0xb7,0x00b7,0x000000b7,·,;
;65294,0xef/0xbc/0x8e,0xff0e,0x0000ff0e,．,;
;729,0xcb/0x99,0x02d9,0x000002d9,˙,;
;727,0xcb/0x97,0x02d7,0x000002d7,˗,;
;775,0xcc/0x87,0x0307,0x00000307,̇,;
;803,0xcc/0xa3,0x0323,0x00000323,̣,;
;160,0xc2/0xa0,0x00a0,0x000000a0, ,;
;45,0x2d,0x002d,0x0000002d,-,;
;65295,0xef/0xbc/0x8f,0xff0f,0x0000ff0f,／,;
;47,0x2f,0x002f,0x0000002f,/,;
;8240,0xe2/0x80/0xb0,0x2030,0x00002030,‰,;
;8241,0xe2/0x80/0xb1,0x2031,0x00002031,‱,;
;8242,0xe2/0x80/0xb2,0x2032,0x00002032,′,;
;8243,0xe2/0x80/0xb3,0x2033,0x00002033,″,;
;8244,0xe2/0x80/0xb4,0x2034,0x00002034,‴,;
;8245,0xe2/0x80/0xb5,0x2035,0x00002035,‵,;
;8246,0xe2/0x80/0xb6,0x2036,0x00002036,‶,;
;8247,0xe2/0x80/0xb7,0x2037,0x00002037,‷,;
;8248,0xe2/0x80/0xb8,0x2038,0x00002038,‸,;
;8249,0xe2/0x80/0xb9,0x2039,0x00002039,‹,;
;8250,0xe2/0x80/0xba,0x203a,0x0000203a,›,;
;8251,0xe2/0x80/0xbb,0x203b,0x0000203b,※,;
;8252,0xe2/0x80/0xbc,0x203c,0x0000203c,‼,;
;8253,0xe2/0x80/0xbd,0x203d,0x0000203d,‽,;
;8254,0xe2/0x80/0xbe,0x203e,0x0000203e,‾,;
;8255,0xe2/0x80/0xbf,0x203f,0x0000203f,‿,;
;8256,0xe2/0x81/0x80,0x2040,0x00002040,⁀,;
;8257,0xe2/0x81/0x81,0x2041,0x00002041,⁁,;
;8258,0xe2/0x81/0x82,0x2042,0x00002042,⁂,;
;8259,0xe2/0x81/0x83,0x2043,0x00002043,⁃,;
;8260,0xe2/0x81/0x84,0x2044,0x00002044,⁄,;
;8261,0xe2/0x81/0x85,0x2045,0x00002045,⁅,;
;8262,0xe2/0x81/0x86,0x2046,0x00002046,⁆,;
;8263,0xe2/0x81/0x87,0x2047,0x00002047,⁇,;
;8264,0xe2/0x81/0x88,0x2048,0x00002048,⁈,;
;8265,0xe2/0x81/0x89,0x2049,0x00002049,⁉,;
;8266,0xe2/0x81/0x8a,0x204a,0x0000204a,⁊,;
;8267,0xe2/0x81/0x8b,0x204b,0x0000204b,⁋,;
;8268,0xe2/0x81/0x8c,0x204c,0x0000204c,⁌,;
;8269,0xe2/0x81/0x8d,0x204d,0x0000204d,⁍,;
;8270,0xe2/0x81/0x8e,0x204e,0x0000204e,⁎,;
;8271,0xe2/0x81/0x8f,0x204f,0x0000204f,⁏,;
;8272,0xe2/0x81/0x90,0x2050,0x00002050,⁐,;
;8273,0xe2/0x81/0x91,0x2051,0x00002051,⁑,;
;8274,0xe2/0x81/0x92,0x2052,0x00002052,⁒,;
;8275,0xe2/0x81/0x93,0x2053,0x00002053,⁓,;
;8276,0xe2/0x81/0x94,0x2054,0x00002054,⁔,;
;8277,0xe2/0x81/0x95,0x2055,0x00002055,⁕,;
;8278,0xe2/0x81/0x96,0x2056,0x00002056,⁖,;
;8279,0xe2/0x81/0x97,0x2057,0x00002057,⁗,;
;8280,0xe2/0x81/0x98,0x2058,0x00002058,⁘,;
;8281,0xe2/0x81/0x99,0x2059,0x00002059,⁙,;
;8282,0xe2/0x81/0x9a,0x205a,0x0000205a,⁚,;
;8283,0xe2/0x81/0x9b,0x205b,0x0000205b,⁛,;
;8284,0xe2/0x81/0x9c,0x205c,0x0000205c,⁜,;
;8285,0xe2/0x81/0x9d,0x205d,0x0000205d,⁝,;
;8286,0xe2/0x81/0x9e,0x205e,0x0000205e,⁞,;
;8287,0xe2/0x81/0x9f,0x205f,0x0000205f, ,;
;8288,0xe2/0x81/0xa0,0x2060,0x00002060,⁠,;
;516,0xc8/0x84,0x0204,0x00000204,Ȅ,;"

  debug_assert_equals "test_print013" "$expected" "$output"
}

test_print013 () {
  test="test_print014"
  output=$(bin/universe -s -x -u -t -d -n --main_delimiter_comma --block_delimiter_semicolon -r "0xe2/0x81/0xb0,0xe1/0x81/0xb2,0x2074,0x00002075")
  expected=";226,0xc3/0xa2,0x00e2,0x000000e2,â,;
;225,0xc3/0xa1,0x00e1,0x000000e1,á,;
;8308,0xe2/0x81/0xb4,0x2074,0x00002074,⁴,;
;8309,0xe2/0x81/0xb5,0x2075,0x00002075,⁵,;"

  debug_assert_equals "test_print014" "$expected" "$output"
}